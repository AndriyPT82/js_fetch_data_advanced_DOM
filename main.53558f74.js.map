{"version":3,"sources":["scripts/main.js"],"names":["body","document","querySelector","BASIC_URL","request","url","fetch","then","response","json","catch","error","Error","getPhones","getPhone","generateList","list","className","headerText","div","createElement","header","ul","classList","add","innerText","append","forEach","phone","li","phoneId","value","id","toUpperCase","phoneName","name","appendChild","getAllSuccessfulDetails","phoneDetails","map","Promise","allSettled","getFirstReceivedDetails","firstRecived","race","getThreeFastestDetails","threeFasted","i","index","indexOf","push","splice","console","log","phoneIDs","allSuccessful","phones","allSuccessfulList","idList"],"mappings":";AAAA,aAEA,IAAMA,EAAOC,SAASC,cAAc,QAC9BC,EAAY,4DAEZC,EAAU,SAACC,GACRC,OAAAA,MAASH,GAAAA,OAAAA,GAAYE,OAAAA,IACzBE,KAAK,SAAAC,GAAYA,OAAAA,EAASC,SAC1BC,MAAM,SAACC,GAAU,OAAA,IAAIC,MAAMD,MAG1BE,EAAY,WAAMT,OAAAA,EAAQ,iBAC1BU,EAAW,SAACT,GAAQD,OAAAA,EAAmBC,WAAAA,OAAAA,EAA5B,WA4BjB,SAASU,EAAaC,EAAMC,EAAWC,GAC/BC,IAAAA,EAAMlB,SAASmB,cAAc,OAC7BC,EAASpB,SAASmB,cAAc,MAChCE,EAAKrB,SAASmB,cAAc,MAElCD,EAAII,UAAUC,IAAIP,GAClBI,EAAOI,UAAYP,EACnBC,EAAIO,OAAOL,EAAQC,GAEnBN,EAAKW,QAAQ,SAAAC,GACLC,IAAAA,EAAK5B,SAASmB,cAAc,MAC5BU,EAAUF,EAAMG,MAAMC,GAAGC,cACzBC,EAAYN,EAAMG,MAAMI,KAE9BN,EAAGJ,UAAeK,GAAAA,OAAAA,EAAWI,KAAAA,OAAAA,GAC7BZ,EAAGc,YAAYP,KAGjB7B,EAAKoC,YAAYjB,GAGnB,SAASkB,EAAwBrB,GACzBsB,IAAAA,EAAetB,EAAKuB,IAAI,SAAAP,GACrBlB,OAAAA,EAASkB,KAGXQ,OAAAA,QAAQC,WAAWH,GAG5B,SAASI,EAAwB1B,GAGxB2B,OAFcH,QAAQI,KAAK5B,GAKpC,SAAS6B,EAAuB7B,GAGzB,IAFC8B,IAAAA,EAAc,GAEXC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACZP,QAAQI,KAAK5B,GAGxBT,KAAK,SAAAqB,GACEoB,IAAAA,EAAQhC,EAAKiC,QAAQrB,GAE3BkB,EAAYI,KAAKlC,EAAKmC,OAAOH,EAAO,GAAG,GAAGjB,MAAMC,MAItDoB,QAAQC,IAAI,wBAAyBP,GA3EvCjC,EAAU,gBACPN,KAAK,SAAAC,GAAYA,OAAAA,EAAS+B,IAAI,SAAAX,GAASA,OAAAA,EAAMI,OAC7CzB,KAAK,SAAA+C,GACEC,IAAAA,EAAgBlB,EAAwBiB,GAOvCC,OALPA,EACGhD,KAAK,SAAAiD,GACJzC,EAAayC,EAAQ,iBAAkB,oBAGpCD,IAERhD,KAAK,SAAAkD,GAQGA,OAPcf,EAAwBe,GAG1ClD,KAAK,SAAAiD,GACJzC,EAAa,CAACyC,GAAS,iBAAkB,oBAGtCC,IAERlD,KAAK,SAAAmD,GACJb,EAAuBa","file":"main.53558f74.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst body = document.querySelector('body');\nconst BASIC_URL = 'https://mate-academy.github.io/phone-catalogue-static/api';\n\nconst request = (url) => {\n  return fetch(`${BASIC_URL}${url}`)\n    .then(response => response.json())\n    .catch((error) => new Error(error));\n};\n\nconst getPhones = () => request('/phones.json');\nconst getPhone = (url) => request(`/phones/${url}.json`);\n\ngetPhones('/phones.json')\n  .then(response => response.map(phone => phone.id))\n  .then(phoneIDs => {\n    const allSuccessful = getAllSuccessfulDetails(phoneIDs);\n\n    allSuccessful\n      .then(phones => {\n        generateList(phones, 'all-successful', 'All Successful');\n      });\n\n    return allSuccessful;\n  })\n  .then(allSuccessfulList => {\n    const firstRecived = getFirstReceivedDetails(allSuccessfulList);\n\n    firstRecived\n      .then(phones => {\n        generateList([phones], 'first-received', 'First Received');\n      });\n\n    return allSuccessfulList;\n  })\n  .then(idList => {\n    getThreeFastestDetails(idList);\n  });\n\nfunction generateList(list, className, headerText) {\n  const div = document.createElement('div');\n  const header = document.createElement('h3');\n  const ul = document.createElement('ul');\n\n  div.classList.add(className);\n  header.innerText = headerText;\n  div.append(header, ul);\n\n  list.forEach(phone => {\n    const li = document.createElement('li');\n    const phoneId = phone.value.id.toUpperCase();\n    const phoneName = phone.value.name;\n\n    li.innerText = `${phoneId} ${phoneName}`;\n    ul.appendChild(li);\n  });\n\n  body.appendChild(div);\n};\n\nfunction getAllSuccessfulDetails(list) {\n  const phoneDetails = list.map(id => {\n    return getPhone(id);\n  });\n\n  return Promise.allSettled(phoneDetails);\n};\n\nfunction getFirstReceivedDetails(list) {\n  const firstRecived = Promise.race(list);\n\n  return firstRecived;\n};\n\nfunction getThreeFastestDetails(list) {\n  const threeFasted = [];\n\n  for (let i = 0; i < 3; i++) {\n    const first = Promise.race(list);\n\n    first\n      .then(phone => {\n        const index = list.indexOf(phone);\n\n        threeFasted.push(list.splice(index, 1)[0].value.id);\n      });\n  };\n  /* eslint-disable no-console */\n  console.log('Three Fastest Details', threeFasted);\n}\n"]}